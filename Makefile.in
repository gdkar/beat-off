# @configure_input@
CC = @CC@
CXX = @CXX@
PREFIX = @prefix@

# cflags @CFLAGS@
# ldflags @LDFLAGS@
# vamp=@VAMP_ENABLED@, flux=@FLUX_ENABLED@, sdl=@SDL_ENABLED@, pm=@PORTMIDI_ENABLED@
# @LIBS@

# Files to include
C_SRC  = $(wildcard src/core/*.c)
CPP_SRC  = $(wildcard src/entity/*.cpp)
C_SRC += $(wildcard src/entity/*.c)
C_SRC += $(wildcard src/types/*.c)
CPP_SRC += $(wildcard src/types/*.cpp)
C_SRC += $(wildcard src/audio/*.c)
C_SRC += $(wildcard src/dynamic/*.c)
C_SRC += $(wildcard src/lib/*.c)
C_SRC += $(wildcard src/output/*.c)
C_SRC += $(wildcard src/patterns/*.c)
C_SRC += $(wildcard src/signals/*.c)
C_SRC += $(wildcard src/state/*.c)
C_SRC += $(wildcard src/timebase/*.c)
CPP_SRC += $(wildcard src/timebase/*.cpp)
C_SRC += $(wildcard src/util/*.c)
CPP_SRC += $(wildcard src/util/*.cpp)
C_SRC += $(wildcard src/waveform/*.c)
C_SRC += $(wildcard BTrack/src/*.c)


ifeq (@VAMP_ENABLED@,yes)
C_SRC += $(wildcard src/filters/*.c)
CPP_SRC += $(wildcard src/filters/*.cpp)
endif

ifeq (@PORTMIDI_ENABLED@,yes)
C_SRC += $(wildcard src/midi/*.c)
endif

ifeq (@SDL_ENABLED@,yes)
C_SRC += $(wildcard src/ui/*.c)
endif

ifeq (@FLUX_ENABLED@,yes)

endif

# If we don't have any C++ files, we can use CC to do the final linking step!
ifeq ($(CPP_SRC),)
CC_FINAL = $(CC)
else
CC_FINAL = $(CXX)
endif

OBJECTS = $(patsubst %.c,.obj/%.o,$(C_SRC))
OBJECTS += $(patsubst %.cpp,.obj/%.o,$(CPP_SRC))
DEPS = $(OBJECTS:.o=.d)

INC  = -I./src/ -I./BTrack/src/
LIB  = -L/usr/local/lib -L/usr/lib @LIBS@ -lGLEW -lglfw

# Assembler, compiler, and linker flags
OPTFLAGS +=  -Ofast -mrecip=all -fassociative-math -ffast-math 
OPTFLAGS += -Wall -Wextra -Wformat=2 -Wno-format-nonliteral -Wshadow -Wpointer-arith -Wcast-qual -Wno-missing-braces -Wno-unused-parameter -Wuninitialized -Werror -Wno-array-bounds  -march=native -g -ggdb
#OPTFLAGS += -funsafe-loop-optimizations -Wunsafe-loop-optimizations -ffast-math 
OPTFLAGS += -DTEXT_ANTIALIAS -DGRAPH_ANTIALIAS -D_BSD_SOURCE -D_GNU_SOURCE -DPOSIX_C_SOURCE=200112
CFLAGS = @CFLAGS@ @CPPFLAGS@ $(INC) -std=gnu11 -D_POSIX_C_SOURCE $(OPTFLAGS)
CXXFLAGS += @CXXFLAGS@ @CPPFLAGS@ $(INC) -std=gnu++14 $(OPTFLAGS) 

LFLAGS  = $(LIB) @LDFLAGS@ 

#DEBUG=DEBUG
ifdef DEBUG
	CXXFLAGS += -fstack-protector -fsanitize=address -g -Og
	CFLAGS += -fstack-protector -fsanitize=address -g -Og
	LIB += -lasan
endif

-include $(DEPS)
.obj/%.d : %.c
	@mkdir -p $(dir $@)
	@$(CC) $(CFLAGS) $< -MM -MT $(@:.d=.o) >$@

.obj/%.d : %.cpp
	@mkdir -p $(dir $@)
	@$(CXX) $(CXXFLAGS) $< -MM -MT $(@:.d=.o) >$@

.obj/ui/layout.o: ui/layout.c
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -Wno-missing-field-initializers -c -o $@ $<

.obj/%.o: %.c
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c -o $@ $<

.obj/%.o: %.cpp
	@mkdir -p $(dir $@)
	$(CXX) $(CXXFLAGS) -c -o $@ $<

# Targets
.PHONY: all
all: beat-off

.PHONY: clean
clean:
	-rm -rf $(OBJECTS) $(DEPS) beat-off ./.obj


beat-off: $(OBJECTS)
	$(CC_FINAL) $(LFLAGS) -g -o beat-off $(OBJECTS) $(LIB)


#%.o: %.c $(C_INC)
#	gcc $(CFLAGS) -std=c99 -c -o $@ $<
#%.o: %.cpp
#	g++ $(CFLAGS) -c -o $@ $<

.DEFAULT_GOAL := beat-off
